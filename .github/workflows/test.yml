name: Test Discord Bot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Debug Python version
      run: |
        echo "Requested Python version: ${{ matrix.python-version }}"
        python --version
        which python
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock pytest-cov requests
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=main --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock pytest-cov requests
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        DISCORD_PUBLIC_KEY: ${{ secrets.DISCORD_PUBLIC_KEY }}
        DISCORD_APPLICATION_ID: ${{ secrets.DISCORD_APPLICATION_ID }}
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
        GOOGLE_CLOUD_PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}

  # Docker Build Test
  docker-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t discord-summarize-bot:test .
    
    - name: Test Docker image
      run: |
        # Test that the container starts
        docker run --rm -d --name test-bot \
          -e DISCORD_PUBLIC_KEY=test \
          -e DISCORD_APPLICATION_ID=test \
          -e DISCORD_BOT_TOKEN=test \
          -e GOOGLE_CLOUD_PROJECT_ID=test \
          -p 8080:8080 \
          discord-summarize-bot:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Clean up
        docker stop test-bot

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r main.py -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run code formatting check
      run: |
        black --check main.py test_local.py
        isort --check-only main.py test_local.py
    
    - name: Run linting
      run: |
        flake8 main.py test_local.py --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run type checking
      run: |
        mypy main.py test_local.py --ignore-missing-imports

  # Deployment Test (Dry Run)
  deployment-test:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docker-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
        service_account_key: ${{ secrets.GOOGLE_CLOUD_SA_KEY }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Test deployment script
      run: |
        chmod +x deploy.sh
        # Test script syntax and environment variable handling
        bash -n deploy.sh
        echo "Deployment script syntax is valid"
    
    - name: Test Docker build for GCR
      run: |
        # Test building for Google Container Registry
        docker build -t gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/discord-summarize-bot:test .
        echo "Docker build for GCR successful"
